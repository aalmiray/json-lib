<?xml version="1.0" encoding="UTF-8"?>
<document>

    <properties>
        <title>Json-lib::Feature List</title>
    </properties>

    <body>
        <section name="Feature List">
            <p>The following is a list of the most notable features available in Json-lib.
            </p>
            <subsection name="Java">
                <p>The following options are configurable with JsonConfig:
                    <ul>
                        <li>bidirectional serialization, supports Maps, Collections, arrays (primitives, multidimensional), beans, DynaBeans, Enums &amp; Annotations (jdk15 package only)</li>
                        <li>supports custom serialization with 3 schemes:
                            <ul>
                                <li>the bean implements JSONString interface</li>
                                <li>register a JsonBeanProcessor for the whole bean</li>
                                <li>register a JsonValueProcessor for a bean property (key and/or type)</li>
                            </ul>
                        </li>
                        <li>register a DefaultValueProcessor for returning a default value when a null reference is encountered</li>
                        <li>plugin your own strategy for selecting a JsonBeanProcessor with JsonBeanProcessorMatcher</li>
                        <li>plugin your own strategy for selecting a DefaultValueProcessor with DefaultValueProcessorMatcher</li>
                        <li>modify the target property name when transforming from JSON to Java if the name is not a valid JavaIdentifier</li>
                        <li>skip modifying map keys when transforming form JSON to Java if the key is not a valid JavaIdentifier</li>
                        <li>register your own JavaIdentifierTransformer strategy</li>
                        <li>plugin your own strategy for setting properties into a bean when transforming from JSON to Java thanks to PropertySetStrategy</li>
                        <li>publish events when building a JSONObject or JSONArray. The available events are:
                            <ul>
                                <li>object start/end</li>
                                <li>array start/end</li>
                                <li>propertySet</li>
                                <li>elementAdded</li>
                                <li>warning (recoverable)</li>
                                <li>error (exception)</li>
                            </ul>
                        </li>
                        <li>Cycle detection, there are two default strategies (default throws an exception), you can register your own</li>
                        <li>Skip transient fields when serailizing to JSON (default=don't skip)</li>
                        <li>Skip JAP @Transient annotated methods when serailizing to JSON (default=don't skip)</li>
                        <li>Exclude bean properties and/or map keys when serailizing to JSON (default=['class','metaClass','declaringClass'])</li>
                        <li>Filters provide a finer detail for excluding/including properties when serializing to JSON or transforming back to Java</li>
                        <li>plugin your own strategy for instatiating beans if they do now follow the no-args constructor rule</li>
                        <li>default JavaBean instantiton strategy accepts package protected and private no-args constructor (Hibernate friendly)</li>
                        <li>JSONObject implements java.util.Map and java.util.Comparable</li>
                        <li>JSONArray implements java.util.List and java.util.Comparable</li>
                        <li>JSONObject, JSONArray and JSONNull implement a base interface: JSON</li>
                        <li>JSONAssert, a test-friendly class for testing JSON values</li>
                    </ul>
                </p>
            </subsection>
            <subsection name="XML">
                <p>The following options are configurable in XMLSerializer:
                    <ul>
                        <li>[read] trim leading and trailing whitespace from element values</li>
                        <li>[read] skip namespace handling</li>
                        <li>[read] trim namespace prefixes</li>
                        <li>[write] skip reading type hints (useful for converting back to JSON)</li>
                        <li>[write] write type hints (useful for converting back to JSON)</li>
                        <li>[write] skip writing type hints (useful for converting back to JSON)</li>
                        <li>[write] change default values for Object, Array and Element tag names</li>
                        <li>[write] change default value for Root element tag name</li>
                        <li>[write] raise error if namespace uri is missing</li>
                        <li>[write] transform an explicit array into an implicit array</li>
                    </ul>
                </p>
            </subsection>
            <subsection name="Web">
                <p>The following options are configurable in WebUtils:
                    <ul>
                        <li>do not output quotes for object keys when its safe for JavaScript</li>
                        <li>two default strategies for preventing javascript hijacking, you can register your own</li>
                    </ul>
                </p>
            </subsection>
            <subsection name="Groovy">
                <ul>
                    <li>support for the leftshift ( &lt;&lt; ) operator in JSONObject</li>
                    <li>support for the spaceship ( &lt;=&gt; ) and its cousins</li>
                    <li>type conversion with the
                        <code>as</code>
                        keyword
                    </li>
                    <li>a Groovy JSON builder</li>
                </ul>
            </subsection>
            <subsection name="JRuby">
                <ul>
                    <li>JSONArray.empty? is an alias for JSONArray.isEmpty()</li>
                    <li>JSONObject.empty? is an alias for JSONObject.isEmpty()</li>
                    <li>support for the leftshift ( &lt;&lt; ) operator in JSONObject</li>
                </ul>
            </subsection>
        </section>
    </body>
</document>
